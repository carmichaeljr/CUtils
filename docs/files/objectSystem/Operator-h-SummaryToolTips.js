NDSummary.OnToolTipsLoaded("File:objectSystem/Operator.h",{103:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype103\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">ArithLogicOperators</div></div></div><div class=\"TTSummary\">The struct that defines various operator operations related to objects.&nbsp; Each struct of &lt;type&gt;_t needs to have a ArithLogicOperators struct named &quot;operators&quot; for the above macros to work.</div></div>",108:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype108\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">add</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Adds two objects.</div></div>",109:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype109\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">sub</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Subtracts two objects.</div></div>",110:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype110\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">mul</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Multiplies two objects.</div></div>",113:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype113\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">div</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Divides two objects.</div></div>",157:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype157\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">mod</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the modulus two objects.</div></div>",158:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype158\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">sll</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the logical shift left of two objects.</div></div>",159:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype159\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">srl</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the logical shift right of two objects.</div></div>",160:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype160\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">and</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the logical and of two objects.</div></div>",161:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype161\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">or</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the logical or of two objects.</div></div>",162:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype162\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span>* (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">not</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> self, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> other, <span class=\"SHKeyword\">void</span> *result, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Computes the logical not of an object.</div></div>",72:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype72\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">ADD(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Add is a function-macro that, given a type and two preexisting objects, computes the addition of those objects. The types of the objects are determined by the implementation of the underlying add function in the ArithLogicOperators struct. If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",77:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype77\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">SUB(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Sub is a function-macro that, given a type and two preexisting objects, computes the subtraction of those objects. The types of the objects are determined by the implementation of the underlying sub function in the ArithLogicOperators struct. If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",78:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype78\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">MUL(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Mul is a function-macro that, given a type and two preexisting objects, computes the multiplication of those objects. The types of the objects are determined by the implementation of the underlying mul function in the ArithLogicOperators struct. If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",79:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype79\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">DIV(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Div is a function-macro that, given a type and two preexisting objects, computes the division of those objects. The types of the objects are determined by the implementation of the underlying div function in the ArithLogicOperators struct. If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",89:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype89\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">MOD(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Mod is a function-macro that, given a type and two preexisting objects, computes the modulus of those objects. The types of the objects are determined by the implementation of the underlying mod function in the ArithLogicOperators struct. If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",106:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype106\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">SLL(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Sll is a function-macro that, given a type and two preexisting objects, computes the logical shift left of those objects. The types of the objects are determined by the implementation of the underlying sll function in the ArithLogicOperators struct.&nbsp; If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",118:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype118\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">SRL(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Srl is a function-macro that, given a type and two preexisting objects, computes the logical shift right of those objects. The types of the objects are determined by the implementation of the underlying srl function in the ArithLogicOperators struct.&nbsp; If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",119:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype119\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">AND(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">And is a function-macro that, given a type and two preexisting objects, computes the logical and of those objects. The types of the objects are determined by the implementation of the underlying and function in the ArithLogicOperators struct.&nbsp; If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",120:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype120\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">OR(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj3</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Or is a function-macro that, given a type and two preexisting objects, computes the logical or of those objects. The types of the objects are determined by the implementation of the underlying or function in the ArithLogicOperators struct.&nbsp; If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",121:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype121\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">NOT(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">type,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj1,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">obj2</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">obj1</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Not is a function-macro that, given a type and two preexisting objects, computes the logical not of those objects. The types of the objects are determined by the implementation of the underlying not function in the ArithLogicOperators struct.&nbsp; If different types than the ones expected by that function are supplied then undefined behavior will occur.</div></div>",88:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype88\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">DEFAULT_ARITH_OPERATORS {</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">add</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">add,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">sub</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">sub,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">mul</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">mul,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">div</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">div,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">mod</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">mod,</td></tr><tr><td class=\"first\"></td><td></td><td></td><td class=\"last\"></td></tr></table></td><td class=\"PAfterParameters\">}</td></tr></table></div></div><div class=\"TTSummary\">DEFAULT_ARITH_OPERATORS is a macro that defines default arithmetic operations for a class.</div></div>",141:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype141\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">DEFAULT_LOGIC_OPERATORS {</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">add</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">add,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">sub</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">sub,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">mul</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">mul,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">div</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">div,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">mod</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">mod,</td></tr><tr><td class=\"first\"></td><td></td><td></td><td class=\"last\"></td></tr></table></td><td class=\"PAfterParameters\">}</td></tr></table></div></div><div class=\"TTSummary\">DEFAULT_LOGIC_OPERATORS is a macro that defines default arithmetic operations for a class.</div></div>",115:"<div class=\"NDToolTip TStruct LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype115\"><div class=\"CPEntry TStruct Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span> <span class=\"SHKeyword\">struct</span></div><div class=\"CPName\">ComparisonOperators</div></div></div><div class=\"TTSummary\">The struct that defines various equality related operations related to objects.&nbsp; Each struct of &lt;type&gt;_t needs to have a ComparisonOperator struct named &quot;comparisonOperators&quot; for the above macros to work.</div></div>",117:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype117\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">eqOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if two objects of the same type are considered equal or not</div></div>",136:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype136\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">neqOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if two objects of the same type are considered not equal</div></div>",137:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype137\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">gtOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if one object is greater than another object of the same type</div></div>",138:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype138\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">ltOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if one object is less than another object of the same type</div></div>",139:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype139\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">gteOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if one object is greater than or equal to another object of the same type</div></div>",140:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype140\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">*</td><td class=\"PName last\">lteOperator</td></tr></table></td><td class=\"PAfterParameters\">)(<span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> first, <span class=\"SHKeyword\">const void</span> * <span class=\"SHKeyword\">const</span> second, size_t size)</td></tr></table></div></div><div class=\"TTSummary\">Defines if one object is less than or equal to another object of the same type</div></div>",123:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype123\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">eq(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Equals is a function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",124:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype124\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">neq(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">A function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",177:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype177\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">gt(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">A function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",178:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype178\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">lt(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">A function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",179:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype179\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">gte(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">A function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",180:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype180\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">lte(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">type,</td></tr><tr><td class=\"PName first last\">obj1,</td></tr><tr><td class=\"PName first last\">obj2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">A function-macro that, given a type and two preexisting objects, compares the two objects.</div></div>",181:"<div class=\"NDToolTip TMacro LC\"><div id=\"NDPrototype181\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\">DEFAULT_COMPARISON_OPERATORS {</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">eqOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">eqOperator,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">neqOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">neqOperator,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">gtOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">gtOperator,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">ltOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">ltOperator,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">gteOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">gteOperator,</td></tr><tr><td class=\"PSymbols first\">.</td><td class=\"PName\">lteOperator</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\">lteOperator,</td></tr><tr><td class=\"first\"></td><td></td><td></td><td class=\"last\"></td></tr></table></td><td class=\"PAfterParameters\">}</td></tr></table></div></div><div class=\"TTSummary\">DEFAULT_COMPARISON_OPERATORS is a macro that defines default comparison functions for a class.</div></div>"});